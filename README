README

This project provides an R package to price asian options. Asian
Options rely on the average of the underlying asset over a
predetermined averaging period leading up to the maturity time
T. Those options are used when price stability of the underlying asset
is particularly important.

This code was implemented as part of a high-performance computing
course at Trinity College Dublin. The report describing he package and
how to use it is included inside the doc folder.


CONTACT

If you do have any suggestions or comments, please let me know at
Dominik.Dahlem@gmail.com.


IMPLEMENTATION DETAILS

The simulation is implemented using R as an independent R package.
Each R routine is documented with the R documentation
environment. Once the library is loaded into an R session help pages
for the individual methods can be displayed using ?method.name. Or,
the package documentation can be displayed using
package?asianOptionPricing. This documentation pages provides an
overview of the package and the implemented routines. Further, it
gives some examples of how to use this package. These examples are
taken from simulation script which is supplied with the project
distribution.

The layout of the project is as follows:

   - src          (the sources)
      - R         (the main R script)
      - package   (the R package)
   - doc          (report)
      - images    (the graphs)


PARALLEL EXECUTION

The application was implemented with parallel execution in mind. The
distribution can be configured (see below) for parallel and serial
use.

R provides some efficient primitives to apply a function to a sequence
of values. These functions were used to run the Monte Carlo simulation
with a number of different configuration parameters, i.e., over a
specified range of the annual volatility or over a specified range of
share prices to simulate the Delta and Gamma values.  Usually, these
are implemented in for-loops, e.g., in C/C++. These primitives, such
as apply and lapply, lend themselves to being executed in parallel,
because they do not have overlapping contexts. The R library snow
provides a nice way of parallelising those primitives with or without
load-balancing.

The R file asian.R implements the Asian call option pricing routines,
which are part of the asianOptionPricing package. price.option.sigma
and price.option.S are the two methods that call the underlying Monte
Carlo simulation with the lapply primitive. If a valid cluster
parameter is passed into those methods the clusterApplyLB routine from
the snow package is used to parallelise the execution of the Monte
Carlo simulation. This method is load-balanced, which means that the
sequence of values for which the simulation is run, can be larger than
nodes being available in the cluster. That means, snow will take care
of distributing the load to the available nodes. Otherwise, if the
cluster parameter is not specified, the serial version is called
instead.

The asianOptionPricing package itself does not set up the
cluster. Instead, the supplied R script -- the driver of the
simulation -- is expected to set up a clustered environment and pass
the cluster configuration into the simulation methods mentioned
above. Consequently, the option pricing package can be installed and
used for both parallel and serial execution transparently.

Another advantage of snow is that it hides a lot of the low-level
details of parallel implementations. It supports the Message Passing
Interface, Parallel Virtual Machines, and sockets in a transparent
way. The simulation script asian_pricing.R sets up an MPI cluster,
which requires the PBS script to prepare the parallel execution of
this script. These steps include generating a configuration file with
the nodes listed which participate in the cluster and starting
mpd. Once mpd is running the mpiexec is called with the parameter "-n
1" which spawns R and advices R to take control of
mpi_comm_spawn. When the simulation is finished mpd is stopped in the
PBS script.

The PBS script creates a text file called NODEFILE which contains all
participating nodes in the cluster setup. The R simulation script
reads this file and calls makeCluster(numNodes, type="MPI"), where
numNodes is the number of nodes as specified in the NODEFILE. This
avoids the need of hard-coding the MPI cluster setup in the R script.

As a measure of controlling exceptions in the execution flow of the R
script asian_pricing.R, the .Last routine was implemented to catch any
such runtime errors and clean up the cluster before exiting from the
script. This method will always be called before executing the
simulation script, whether an exception occurred or not.


CONFIGURATION AND INSTALLATION

The support for a parallel execution is provided via a configure
script. If it is enabled, configure will generate the R script file
with the respective snow API calls enabled. Otherwise, they are
disabled. Also, the DESCRIPTION file as part of the Asian option
pricing package is generated to include the snow library as a
dependency. When the Asian option pricing library is installed, these
dependencies have to be available in the local R installation.

Additionally, the report can be generated using the build system.

The assignment ships with a configure script generated by
autotools. The installation procedure requires the following steps
which are outlined in more detail below. First configure the package
(i.e., for serial or parallel use), install the Asian option pricing
package, run the simulation script.

The following configure options are supported:

  --enable-mpi: enables the snow library for parallel execution.
  --enable-report: enables the report generation.

To generate the report PDF file, enable the report generation feature
with configure and call make in the root directory of the project
distribution. In this case configure will check whether latex and the
respective tools are installed.


Apart from a basic R (>= 2.6) installation, this package requires the
fOptions and gplots packages. If those packages are not installed yet
open an R session and install them using the R interface

> install.packages("fOptions", lib=Sys.getenv("R_LIBS_USER"), \
    dependencies=TRUE, method="wget")
> install.packages("gplots", lib=Sys.getenv("R_LIBS_USER"), \
    dependencies=TRUE, method="wget")

The method parameter specifies the usage of the wget utility to
download the package. The advantage of this approach is that it uses
the system environment variables http_proxy if configured to go
through the network proxy.

fOptions provides methods to generate normal random numbers using an
underlying Sobol sequence or a pseudo random number generator. The
Asian option pricing package provides a configuration option to select
either one of those.

In order to install the Asian option pricing package as a user library
you would first need to find out which user library path is configured
as the default one with:

> R
> Sys.getenv("R_LIBS_USER") (in the R session)

On my computer the default path for user libraries is
"~/R/i686-pc-linux-gnu-library/2.7". Create these directories, if they
don't exist and then install the library only for the user with

> cd src/package
> R CMD INSTALL -l ~/R/i686-pc-linux-gnu-library/2.7 asianOptionPricing

Alternatively, the dependencies and the option pricing package can be
installed system-wide:

> R (start an R session)
> install.packages("fOptions", dependencies=TRUE, method="wget")
> install.packages("gplots", dependencies=TRUE, method="wget")
> q() (quit the R session)
> cd src/package
> R CMD INSTALL asianOptionPricing
